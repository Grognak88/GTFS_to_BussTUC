import java.io.*;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;

public class UpdateRoutePeriode {
    private static final DateTimeFormatter FORMAT_INN = DateTimeFormatter.ofPattern("yyMMdd");
    public static final DateTimeFormatter FORMAT_OUT = DateTimeFormatter.ofPattern("yyyy,MM,dd");

    private static ArrayList<RoutePeriod> periods;

    public static void updateRoutePeriod(String comment, String admCode, String dateFrom, String dateTo, String pathToRoutePeriod){
        periods = new ArrayList<>();

        var startDate = LocalDate.parse(dateFrom, FORMAT_INN);
        var endDate = LocalDate.parse(dateTo, FORMAT_INN);

        var folderName = admCode.toLowerCase() + "_" + dateFrom;

        String new_route = "route_period(   tt, " + folderName + ", date(" + startDate.format(FORMAT_OUT) + "),   date(" + endDate.format(FORMAT_OUT) + ") ).    %% " + comment;

        RoutePeriod newPeriod = new RoutePeriod(new_route, endDate);
        periods.add(newPeriod);

        try ( var reader = new BufferedReader( new FileReader(pathToRoutePeriod))) {
            String strLine;
            while ((strLine = reader.readLine()) != null) {
                if( strLine.startsWith("%%route_period") || strLine.startsWith("route_period") || strLine.startsWith("%route_period")){
                    RoutePeriod p = new RoutePeriod( strLine );
                    if (!periods.contains(p))
                        periods.add( p );
                }
            }
        } catch ( FileNotFoundException e) {
            System.out.println("File not found: "+e);
            e.printStackTrace();
        } catch ( Exception e) {
            e.printStackTrace();
        }
        periods.sort(null);

        write_routes(pathToRoutePeriod);
    }

    private static void write_routes(String path) {
        try (var outFile = new BufferedWriter( new FileWriter(path))) {
            outFile.write("/* -*- Mode:Prolog; coding:utf-8; -*- */\n");

            outFile.write( "%% Generated by "+UpdateRoutePeriode.class+" on "+new Timestamp( new Date().getTime() )+"\n\n" );
            outFile.write( ":- module( route_period, [ route_period/4 ] ).\n\n"+
                    "% Xmas routes before winter routes\n"+
                    "% Easter routes before winter routes\n\n"+

                    "%% Route module 'nil' in route_period means that the route module is not implemented yet\n"+
                    "%% Important to have dummy route modules to give message of no routes for this date\n\n");
            outFile.write("%%%% ACTUAL  ROUTES              START-DATE           END-DATE (sorted!)\n\n");

            for (RoutePeriod period :
                    periods) {
                outFile.write(period.toString() + "\n");
            }
        } catch (IOException e) {
            System.out.println("********* IOException " + e);
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        if( args.length != 5 ){
            String usage = "UpdateRoutePeriod [comment] [admCode] [fromDate] [toDate] [filePath] " +
                    "Append a route period predicate at the end of route_period.pl in [filepath]";
            System.err.println( usage );
            System.exit( 1 );
        }else{
            try{
                updateRoutePeriod( args[0], args[1], args[2], args[3], args[4] );
                System.out.println("Conversion completed!");
                //			}catch(FileNotFoundException e){
                //				System.err.println("Failed to update -> File unavailable: "+e);
            }catch(Exception e){
                System.err.println("Failed to update: "+e);
            }
        }
    }
}

class RoutePeriod implements Comparable<RoutePeriod>{
    private final String route;
    private LocalDate end_date;

    public RoutePeriod(String route, LocalDate end_date) {
        this.route = route;
        this.end_date = end_date;
    }

    public RoutePeriod(String route) {
        this.route = route;
        setDate();
    }

    private void setDate() {
        String date_string;
        switch (route.substring(0,5)) {
            case "route" -> date_string = route.substring(58,68);
            case "%rout" -> date_string = route.substring(59,69);
            case "%%rou" -> date_string = route.substring(60,70);
            default -> date_string = "2012,12,12";
        }
        this.end_date = LocalDate.parse(date_string, UpdateRoutePeriode.FORMAT_OUT);
    }

    public LocalDate getEnd_date() {
        return end_date;
    }

    public LocalDate getStart_date() {
        String date_string;
        switch (route.substring(0, 5)) {
            case "route" -> date_string = route.substring(38,48);
            case "%rout" -> date_string = route.substring(39,49);
            case "%%rou" -> date_string = route.substring(40,50);
            default -> date_string = "2012,12,12";
        }

        return LocalDate.parse(date_string, UpdateRoutePeriode.FORMAT_OUT);
    }

    @Override
    public String toString() {
        return this.route;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj instanceof RoutePeriod) {
            return ((RoutePeriod) obj).getStart_date().equals(this.getStart_date()) && ((RoutePeriod) obj).getEnd_date().equals(this.getEnd_date());
        }

        return false;
    }

    @Override
    public int compareTo(RoutePeriod o) {
        if( this.getEnd_date() == null || o.getEnd_date() == null ){
            return 0;
        }
    return (int) this.getEnd_date().compareTo(o.getEnd_date() );
    }
}
